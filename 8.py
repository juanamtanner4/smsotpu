import requests
import telegram
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
import asyncio
import time
from bs4 import BeautifulSoup
import re
from datetime import datetime, timedelta
import json
import logging
import os
import pytz
import hashlib

# ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶ü ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
BOT_TOKEN = "7735025169:AAGIrr4OlRm0Yv0fIyri6hvsUH-znBtREeo"
CHAT_ID = "-1002639503570"
ADMIN_CHAT_ID = "-1002639503570"
ADMIN_USER_IDS = [849641986]  # ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡¶¶‡ßá‡¶∞ user_id (‡¶Ø‡ßá‡¶Æ‡¶®, @Bappyx2)
ADMINS_FILE = "admins.json"
bot = telegram.Bot(token=BOT_TOKEN)

# ‡¶≤‡¶ó‡¶á‡¶® ‡¶è‡¶¨‡¶Ç ‡¶è‡¶∏‡¶è‡¶Æ‡¶ê‡¶∏ ‡¶§‡¶•‡ßç‡¶Ø
LOGIN_URL = "https://www.ivasms.com/login"
SMS_LIST_URL = "https://www.ivasms.com/portal/sms/received/getsms/number"
SMS_DETAILS_URL = "https://www.ivasms.com/portal/sms/received/getsms/number/sms"
EMAIL = "bappyrb02@gmail.com"
PASSWORD = "bappyrb02@gmail.com"  # ‡¶∏‡¶†‡¶ø‡¶ï ‡¶™‡¶æ‡¶∏‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶¶‡¶ø‡¶®

# ‡¶è‡¶∏‡¶è‡¶Æ‡¶ê‡¶∏ ‡¶π‡ßá‡¶°‡¶æ‡¶∞
SMS_HEADERS = {
    "X-Requested-With": "XMLHttpRequest",
    "Referer": "https://www.ivasms.com/portal/sms/received",
    "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
    "Accept": "text/html, */*; q=0.01",
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
}

# ‡¶®‡¶§‡ßÅ‡¶® ‡¶è‡¶∏‡¶è‡¶Æ‡¶ê‡¶∏ ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡ßá‡¶ü
seen_sms = set()
TIME_THRESHOLD = timedelta(minutes=60)

# ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ
NUMBERS_RANGES_FILE = "numbers_ranges.json"
SEEN_SMS_FILE = "seen_sms.json"

# ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø
pending_ranges = {}  # {chat_id: {"range": str, "numbers": list}}

# ‡¶°‡¶ø‡¶¨‡¶æ‡¶ó ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶°‡¶ø‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡¶ø
DEBUG_LOG_DIR = "debug_logs"
if not os.path.exists(DEBUG_LOG_DIR):
    os.makedirs(DEBUG_LOG_DIR)

# ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡¶æ‡¶∞‡ßç‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶∏
def load_admins():
    """Load admin IDs from admins.json."""
    global ADMIN_USER_IDS
    if os.path.exists(ADMINS_FILE):
        try:
            with open(ADMINS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
                ADMIN_USER_IDS = data.get("admin_ids", ADMIN_USER_IDS)
            logger.info(f"‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶Ü‡¶á‡¶°‡¶ø: {ADMIN_USER_IDS}")
        except Exception as e:
            logger.error(f"‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶´‡¶æ‡¶á‡¶≤ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e}")
    else:
        logger.info("‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø, ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá")

def save_admins():
    """Save admin IDs to admins.json."""
    try:
        with open(ADMINS_FILE, "w", encoding="utf-8") as f:
            json.dump({"admin_ids": ADMIN_USER_IDS}, f, ensure_ascii=False, indent=4)
        logger.info("‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶Ü‡¶á‡¶°‡¶ø ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá")
    except Exception as e:
        logger.error(f"‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e}")

# Load admins at startup
load_admins()

async def send_startup_alert(chat_id=CHAT_ID):
    """‡¶¨‡¶ü ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü‡¶Ü‡¶™ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶≤‡¶æ‡¶∞‡ßç‡¶ü ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã"""
    try:
        current_time = datetime.now(pytz.timezone('Asia/Dhaka')).strftime("%d-%m-%Y %H:%M:%S")
        startup_msg = (
            f"‚ú® *Bot Started* ‚ú®\n\n"
            f"‚è∞ *Time:* {current_time}\n"
            f"üìû *Status:* Running!\n"
            f"üîß *Service:* Seven1Tel / Ivasms\n\n"
            f"üîë *Info:* Ready for OTPs"
        )
        keyboard = [
            [InlineKeyboardButton("Bot Owner", url="https://t.me/Bappyx2")],
            [InlineKeyboardButton("Join Backup", url="https://t.me/ipsharechat")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await bot.send_message(
            chat_id=chat_id,
            text=startup_msg,
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
        logger.info("‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü‡¶Ü‡¶™ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶≤‡¶æ‡¶∞‡ßç‡¶ü ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá")
    except Exception as e:
        logger.error(f"‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü‡¶Ü‡¶™ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶≤‡¶æ‡¶∞‡ßç‡¶ü ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e)}")
        await send_telegram_message(f"‚ùå ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü‡¶Ü‡¶™ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶≤‡¶æ‡¶∞‡ßç‡¶ü ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e)}", chat_id)

def initialize_numbers_ranges_file():
    """JSON ‡¶´‡¶æ‡¶á‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶¶‡¶ø ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá"""
    default_data = {"ranges": []}
    try:
        if not os.path.exists(NUMBERS_RANGES_FILE):
            with open(NUMBERS_RANGES_FILE, "w", encoding="utf-8") as f:
                json.dump(default_data, f, indent=2)
            logger.info(f"JSON ‡¶´‡¶æ‡¶á‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {NUMBERS_RANGES_FILE}")
    except Exception as e:
        logger.error(f"numbers_ranges.json ‡¶´‡¶æ‡¶á‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e)}")

def initialize_seen_sms_file():
    """seen_sms.json ‡¶´‡¶æ‡¶á‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶¶‡¶ø ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá"""
    try:
        if not os.path.exists(SEEN_SMS_FILE):
            with open(SEEN_SMS_FILE, "w", encoding="utf-8") as f:
                json.dump({"sms_ids": [], "last_updated": datetime.now().isoformat()}, f)
            logger.info(f"seen_sms ‡¶´‡¶æ‡¶á‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {SEEN_SMS_FILE}")
    except Exception as e:
        logger.error(f"seen_sms ‡¶´‡¶æ‡¶á‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e)}")

def load_seen_sms():
    """seen_sms.json ‡¶•‡ßá‡¶ï‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ SMS ‡¶Ü‡¶á‡¶°‡¶ø ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ"""
    global seen_sms
    initialize_seen_sms_file()
    try:
        with open(SEEN_SMS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        seen_sms = set(data.get("sms_ids", []))
        logger.info(f"seen_sms.json ‡¶•‡ßá‡¶ï‡ßá {len(seen_sms)}‡¶ü‡¶ø SMS ‡¶Ü‡¶á‡¶°‡¶ø ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá")
    except Exception as e:
        logger.error(f"seen_sms.json ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e)}")
        seen_sms = set()

def save_seen_sms():
    """seen_sms.json ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ SMS ‡¶Ü‡¶á‡¶°‡¶ø ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ"""
    try:
        with open(SEEN_SMS_FILE, "w", encoding="utf-8") as f:
            json.dump({
                "sms_ids": list(seen_sms),
                "last_updated": datetime.now().isoformat()
            }, f, indent=2)
        logger.info("seen_sms.json ‡¶´‡¶æ‡¶á‡¶≤‡ßá SMS ‡¶Ü‡¶á‡¶°‡¶ø ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá")
    except Exception as e:
        logger.error(f"seen_sms.json ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e)}")
        asyncio.create_task(send_telegram_message(f"‚ùå seen_sms.json ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e)}", CHAT_ID))

def load_numbers_ranges():
    """JSON ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶∞‡ßá‡¶û‡ßç‡¶ú ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ"""
    initialize_numbers_ranges_file()
    try:
        with open(NUMBERS_RANGES_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        numbers = []
        ranges = []
        for range_item in data.get("ranges", []):
            range_value = str(range_item.get("range", "")).strip()
            range_numbers = range_item.get("numbers", [])
            if range_value and range_value not in ranges:
                ranges.append(range_value)
            for num in range_numbers:
                if num not in numbers:
                    numbers.append(str(num))
        logger.info(f"JSON ‡¶•‡ßá‡¶ï‡ßá ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞: {numbers}")
        logger.info(f"JSON ‡¶•‡ßá‡¶ï‡ßá ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶∞‡ßá‡¶û‡ßç‡¶ú: {ranges}")
        return numbers, ranges
    except Exception as e:
        error_msg = f"‚ùå JSON ‡¶´‡¶æ‡¶á‡¶≤ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e)}"
        logger.error(error_msg)
        asyncio.create_task(send_telegram_message(error_msg, CHAT_ID))
        return [], []

def save_numbers_ranges(ranges_data):
    """JSON ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶∞‡ßá‡¶û‡ßç‡¶ú ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ"""
    try:
        if not isinstance(ranges_data, list):
            logger.error(f"Invalid ranges_data type: {type(ranges_data)}")
            raise ValueError("ranges_data must be a list")
        
        cleaned_ranges = []
        for range_item in ranges_data:
            if not isinstance(range_item, dict) or "range" not in range_item or "numbers" not in range_item:
                logger.warning(f"Skipping invalid range item: {range_item}")
                continue
            range_item_copy = range_item.copy()
            range_item_copy["range"] = str(range_item_copy["range"]).strip()
            range_item_copy["numbers"] = [str(num) for num in list(set(range_item.get("numbers", [])))]
            cleaned_ranges.append(range_item_copy)
        
        logger.info(f"Saving ranges to JSON: {cleaned_ranges}")
        with open(NUMBERS_RANGES_FILE, "w", encoding="utf-8") as f:
            json.dump({"ranges": cleaned_ranges}, f, indent=2)
        logger.info("JSON ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶∞‡ßá‡¶û‡ßç‡¶ú ‡¶è‡¶¨‡¶Ç ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá")
    except Exception as e:
        error_msg = f"‚ùå JSON ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e)}"
        logger.error(error_msg)
        asyncio.create_task(send_telegram_message(error_msg, CHAT_ID))

def delete_all_numbers_ranges():
    """‡¶∏‡¶ï‡¶≤ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶∞‡ßá‡¶û‡ßç‡¶ú ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ"""
    try:
        initialize_numbers_ranges_file()
        with open(NUMBERS_RANGES_FILE, "w", encoding="utf-8") as f:
            json.dump({"ranges": []}, f, indent=2)
        logger.info("‡¶∏‡¶ï‡¶≤ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶∞‡ßá‡¶û‡ßç‡¶ú ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá")
        return True
    except Exception as e:
        logger.error(f"‡¶∏‡¶ï‡¶≤ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶∞‡ßá‡¶û‡ßç‡¶ú ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e)}")
        asyncio.create_task(send_telegram_message(f"‚ùå ‡¶∏‡¶ï‡¶≤ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶∞‡ßá‡¶û‡ßç‡¶ú ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e)}", CHAT_ID))
        return False

def validate_phone_number(number):
    """‡¶´‡ßã‡¶® ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶¨‡ßà‡¶ß ‡¶ï‡¶ø ‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ"""
    pattern = r"^\d{8,12}$"
    return bool(re.match(pattern, str(number)))

def mask_phone_number(number):
    """‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡ßá‡¶∞ ‡ß¨‡¶∑‡ßç‡¶† ‡¶è‡¶¨‡¶Ç ‡ß≠‡¶Æ ‡¶°‡¶ø‡¶ú‡¶ø‡¶ü ‡¶Æ‡¶æ‡¶∏‡ßç‡¶ï ‡¶ï‡¶∞‡¶æ"""
    logger.info(f"Original number input: '{number}'")
    cleaned_number = ''.join(c for c in str(number) if c.isdigit() or c == '+')
    has_plus = cleaned_number.startswith('+')
    cleaned_number = cleaned_number.lstrip('+')
    logger.info(f"Cleaned number: '{cleaned_number}'")
    
    if len(cleaned_number) >= 8:
        if len(cleaned_number) >= 7:
            masked = f"{cleaned_number[:5]}**{cleaned_number[7:]}"
        else:
            masked = f"{cleaned_number[:5]}**"
        if has_plus:
            masked = f"+{masked}"
        logger.info(f"Masked number: '{masked}'")
        return masked
    elif len(cleaned_number) > 0:
        masked = f"+{cleaned_number}" if has_plus else cleaned_number
        logger.info(f"Number too short, returning: '{masked}'")
        return masked
    else:
        logger.warning("Empty number after cleaning, returning '+Unknown'")
        return "+Unknown"

async def send_telegram_message(message, chat_id=CHAT_ID, reply_markup=None):
    """‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã"""
    logger.info(f"Sending Telegram message to chat_id {chat_id}: {message[:100]}...")
    try:
        await bot.send_message(
            chat_id=chat_id,
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        logger.info(f"‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {message[:100]}...")
    except telegram.error.BadRequest as e:
        logger.error(f"‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ (Bad Request): {str(e)}")
        try:
            await bot.send_message(
                chat_id=chat_id,
                text=message,
                reply_markup=reply_markup,
                parse_mode=None
            )
            logger.info(f"‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá (Markdown ‡¶õ‡¶æ‡¶°‡¶º‡¶æ): {message[:100]}...")
        except Exception as e2:
            logger.error(f"‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶™‡ßÅ‡¶®‡¶∞‡¶æ‡¶Ø‡¶º ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e2)}")
    except telegram.error.InvalidToken:
        logger.error("‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶ü ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶≠‡ßÅ‡¶≤‡•§ BotFather ‡¶•‡ßá‡¶ï‡ßá ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
    except telegram.error.NetworkError as e:
        logger.error(f"‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶®‡ßá‡¶ü‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e)}")
    except Exception as e:
        logger.error(f"‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e)}")

def login_and_get_csrf(max_retries=3):
    """‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßá CSRF ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßá‡¶∂‡¶® ‡¶®‡ßá‡¶ì‡¶Ø‡¶º‡¶æ"""
    for attempt in range(max_retries):
        session = requests.Session()
        try:
            logger.info(f"‡¶≤‡¶ó‡¶á‡¶® ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ {attempt + 1}/{max_retries}...")
            login_page = session.get(LOGIN_URL, headers=SMS_HEADERS, timeout=10)
            logger.info(f"‡¶≤‡¶ó‡¶á‡¶® ‡¶™‡ßá‡¶ú‡ßá‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ï‡ßã‡¶°: {login_page.status_code}")
            soup = BeautifulSoup(login_page.text, 'html.parser')
            csrf_input = soup.find('input', {'name': '_token'})
            if not csrf_input:
                logger.error("CSRF ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø!")
                return None, None
            csrf_token = csrf_input['value']
            logger.info(f"CSRF ‡¶ü‡ßã‡¶ï‡ßá‡¶®: {csrf_token}")
            
            payload = {
                "_token": csrf_token,
                "email": EMAIL,
                "password": PASSWORD
            }
            logger.info("‡¶≤‡¶ó‡¶á‡¶® ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
            login_response = session.post(LOGIN_URL, data=payload, headers=SMS_HEADERS, timeout=10)
            logger.info(f"‡¶≤‡¶ó‡¶á‡¶® ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ï‡ßã‡¶°: {login_response.status_code}")
            logger.info(f"‡¶∏‡ßá‡¶∂‡¶® ‡¶ï‡ßÅ‡¶ï‡¶ø‡¶ú: {session.cookies.get_dict()}")
            if login_response.status_code != 200 or "Dashboard" not in login_response.text:
                error_msg = f"‚ùå ‡¶≤‡¶ó‡¶á‡¶® ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•! ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ {attempt + 1}/{max_retries}"
                logger.error(error_msg)
                asyncio.create_task(send_telegram_message(error_msg, CHAT_ID))
                if attempt < max_retries - 1:
                    time.sleep(5)
                continue
            logger.info("‡¶≤‡¶ó‡¶á‡¶® ‡¶∏‡¶´‡¶≤!")
            return session, csrf_token
        except Exception as e:
            error_msg = f"‚ùå ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ (‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ {attempt + 1}/{max_retries}): {str(e)}"
            logger.error(error_msg)
            asyncio.create_task(send_telegram_message(error_msg, CHAT_ID))
            if attempt < max_retries - 1:
                time.sleep(5)
    return None, None

async def sync_numbers_from_api(session, csrf_token, chat_id=CHAT_ID):
    """API ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶∞‡ßá‡¶û‡ßç‡¶ú ‡¶´‡ßá‡¶ö ‡¶ï‡¶∞‡ßá numbers_ranges.json ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ"""
    try:
        logger.info("Starting API synchronization for numbers and ranges...")
        
        url = f"https://www.ivasms.com/portal/numbers?draw=2&columns%5B0%5D%5Bdata%5D=number_id&columns%5B0%5D%5Bname%5D=id&columns%5B0%5D%5Borderable%5D=false&columns%5B1%5D%5Bdata%5D=Number&columns%5B2%5D%5Bdata%5D=range&columns%5B3%5D%5Bdata%5D=A2P&columns%5B4%5D%5Bdata%5D=P2P&columns%5B5%5D%5Bdata%5D=action&columns%5B5%5D%5Bsearchable%5D=false&columns%5B5%5D%5Borderable%5D=false&order%5B0%5D%5Bcolumn%5D=1&order%5B0%5D%5Bdir%5D=desc&start=0&length=-1&search%5Bvalue%5D=&_={int(time.time() * 1000)}"
        
        headers = SMS_HEADERS.copy()
        headers.update({
            "x-csrf-token": csrf_token,
            "Accept": "application/json"
        })
        
        response = session.get(url, headers=headers, timeout=10)
        logger.info(f"API response status code: {response.status_code}")
        
        if not response.ok:
            error_msg = f"‚ùå API sync failed! Status code: {response.status_code}"
            logger.error(error_msg)
            await send_telegram_message(error_msg, chat_id)
            return False
        
        try:
            data = response.json()
            logger.info(f"API response data: {json.dumps(data, indent=2)[:500]}...")
        except ValueError as e:
            error_msg = f"‚ùå Failed to parse API response as JSON: {str(e)}"
            logger.error(error_msg)
            await send_telegram_message(error_msg, chat_id)
            return False
        
        ranges_data = []
        for record in data.get("data", []):
            range_value = str(record.get("range", "")).strip() if record.get("range") is not None else ""
            number = str(record.get("Number", "")).strip() if record.get("Number") is not None else ""
            if not range_value or not number or not validate_phone_number(number):
                logger.warning(f"Skipping invalid record: range={range_value}, number={number}")
                continue
            existing_range = next((item for item in ranges_data if item["range"] == range_value), None)
            if existing_range:
                if number not in existing_range["numbers"]:
                    existing_range["numbers"].append(number)
            else:
                ranges_data.append({"range": range_value, "numbers": [number]})
        
        try:
            with open(NUMBERS_RANGES_FILE, "r", encoding="utf-8") as f:
                existing_data = json.load(f).get("ranges", [])
        except FileNotFoundError:
            logger.info("No existing numbers_ranges.json found, creating new.")
            existing_data = []
        
        for api_range in ranges_data:
            range_value = api_range["range"]
            numbers = api_range["numbers"]
            existing_range = next((item for item in existing_data if item["range"] == range_value), None)
            if existing_range:
                existing_range["numbers"] = list(set(existing_range["numbers"] + numbers))
            else:
                existing_data.append(api_range)
        
        save_numbers_ranges(existing_data)
        
        total_ranges = len(existing_data)
        total_numbers = sum(len(r["numbers"]) for r in existing_data)
        success_msg = f"‚úÖ API ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶∞‡ßá‡¶û‡ßç‡¶ú ‡¶∏‡¶ø‡¶ô‡ßç‡¶ï‡ßç‡¶∞‡ßã‡¶®‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! ‡¶Æ‡ßã‡¶ü ‡¶∞‡ßá‡¶û‡ßç‡¶ú: {total_ranges}, ‡¶Æ‡ßã‡¶ü ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞: {total_numbers}"
        logger.info(success_msg)
        keyboard = []
        if str(chat_id) == str(ADMIN_CHAT_ID):
            keyboard.append([InlineKeyboardButton("‡¶∏‡¶ø‡¶ô‡ßç‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®", callback_data="sync_now")])
        keyboard.append([InlineKeyboardButton("‡¶∏‡¶ï‡¶≤ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®", callback_data="confirm_delete_all")])
        reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
        await send_telegram_message(success_msg, chat_id, reply_markup=reply_markup)
        return True
    
    except Exception as e:
        error_msg = f"‚ùå API sync error: {str(e)}"
        logger.error(error_msg)
        await send_telegram_message(error_msg, chat_id)
        return False

async def fetch_number_list(session, csrf_token, range_value):
    """‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞‡ßá‡¶∞ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶´‡ßá‡¶ö ‡¶ï‡¶∞‡¶æ (‡¶™‡ßá‡¶ú‡¶ø‡¶®‡ßá‡¶∂‡¶® ‡¶∏‡¶π)"""
    post_data = {
        "_token": csrf_token,
        "start": (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d"),  # ‡¶ó‡¶§ ‡ß≠ ‡¶¶‡¶ø‡¶®‡ßá‡¶∞ ‡¶°‡¶æ‡¶ü‡¶æ
        "end": datetime.now().strftime("%Y-%m-%d"),
        "range": range_value,
        "draw": 1,
        "length": 100  # ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶™‡ßá‡¶ú‡ßá ‡ßß‡ß¶‡ß¶‡¶ü‡¶ø ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞
    }
    
    headers = SMS_HEADERS.copy()
    headers["x-csrf-token"] = csrf_token
    
    max_retries = 3
    page = 0
    numbers = []
    
    while True:
        post_data["start"] = page * post_data["length"]
        for attempt in range(max_retries):
            try:
                logger.info(f"‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶´‡ßá‡¶ö ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá (‡¶™‡ßá‡¶ú {page}, ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ {attempt + 1}/{max_retries}): ‡¶∞‡ßá‡¶û‡ßç‡¶ú={range_value}")
                response = session.post(SMS_LIST_URL, headers=headers, data=post_data, timeout=10)
                logger.info(f"‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ï‡ßã‡¶°: {response.status_code}")
                
                if not response.ok:
                    error_msg = f"‚ùå ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶´‡ßá‡¶ö ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•! ‡¶∞‡ßá‡¶û‡ßç‡¶ú={range_value}, ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ï‡ßã‡¶°: {response.status_code}"
                    logger.error(error_msg)
                    if response.status_code in [401, 403]:
                        return "SESSION_EXPIRED", []
                    if attempt < max_retries - 1:
                        await asyncio.sleep(5)
                        continue
                    return None, []
                
                soup = BeautifulSoup(response.text, "html.parser")
                number_cards = soup.find_all("div", class_="card card-body border-bottom bg-100 p-2 rounded-0")
                logger.info(f"Found {len(number_cards)} number cards for range {range_value}")
                
                if not number_cards:
                    debug_file = os.path.join(DEBUG_LOG_DIR, f"empty_number_list_{range_value}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html")
                    with open(debug_file, "w", encoding="utf-8") as f:
                        f.write(response.text)
                    logger.error(f"‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏ ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {debug_file}")
                
                for card in number_cards:
                    number_div = card.find("div", class_="col-sm-4 border-bottom border-sm-bottom-0 pb-2 pb-sm-0 mb-2 mb-sm-0")
                    if number_div:
                        number = str(number_div.get_text(strip=True))
                        logger.info(f"Extracted number: {number}")
                        onclick = number_div.get("onclick", "")
                        id_number_match = re.search(r"'(\d+)','(\d+)'", onclick)
                        id_number = id_number_match.group(2) if id_number_match else ""
                        numbers.append({"number": number, "id_number": id_number})
                
                if len(number_cards) < post_data["length"]:
                    break
                
                page += 1
                break  # Exit retry loop if successful
                
            except Exception as e:
                error_msg = f"‚ùå ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶´‡ßá‡¶ö ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: ‡¶∞‡ßá‡¶û‡ßç‡¶ú={range_value}, ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {str(e)}"
                logger.error(error_msg)
                if attempt < max_retries - 1:
                    await asyncio.sleep(5)
                continue
        
        if len(number_cards) < post_data["length"]:
            break
    
    if numbers:
        logger.info(f"‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶´‡ßá‡¶ö ‡¶∏‡¶´‡¶≤: {len(numbers)}‡¶ü‡¶ø ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá")
        return response.text, numbers
    else:
        error_msg = f"‚ùå ‡¶ï‡ßã‡¶®‡ßã ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø! ‡¶∞‡ßá‡¶û‡ßç‡¶ú={range_value}"
        logger.error(error_msg)
        return None, []

async def fetch_sms_details(session, csrf_token, number, range_value, id_number):
    """‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞‡ßá‡¶∞ SMS ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶´‡ßá‡¶ö ‡¶ï‡¶∞‡¶æ"""
    post_data = {
        "_token": csrf_token,
        "Number": str(number),
        "Range": str(range_value),
        "id_number": id_number
    }
    
    headers = SMS_HEADERS.copy()
    headers["x-csrf-token"] = csrf_token
    
    max_retries = 3
    for attempt in range(max_retries):
        try:
            logger.info(f"‡¶è‡¶∏‡¶è‡¶Æ‡¶è‡¶∏ ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶´‡ßá‡¶ö ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá (‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ {attempt + 1}/{max_retries}): ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞={number}, ‡¶∞‡ßá‡¶û‡ßç‡¶ú={range_value}, id_number={id_number}")
            response = session.post(SMS_DETAILS_URL, headers=headers, data=post_data, timeout=10)
            logger.info(f"‡¶è‡¶∏‡¶è‡¶Æ‡¶è‡¶∏ ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ï‡ßã‡¶°: {response.status_code}")
            
            debug_file = os.path.join(DEBUG_LOG_DIR, f"sms_raw_{number}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html")
            with open(debug_file, "w", encoding="utf-8") as f:
                f.write(response.text)
            logger.info(f"Raw response saved: {debug_file}")
            
            if not response.ok:
                error_msg = f"‚ùå ‡¶è‡¶∏‡¶è‡¶Æ‡¶è‡¶∏ ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶´‡ßá‡¶ö ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•! ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞={number}, ‡¶∞‡ßá‡¶û‡ßç‡¶ú={range_value}, ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ï‡ßã‡¶°: {response.status_code}"
                logger.error(error_msg)
                if response.status_code in [401, 403]:
                    return "SESSION_EXPIRED"
                if attempt < max_retries - 1:
                    await asyncio.sleep(5)
                    continue
                return None
            
            soup = BeautifulSoup(response.text, "html.parser")
            sms_content = soup.find("div", class_="card card-body border-bottom bg-soft-dark p-2 rounded-0")
            if not sms_content or not sms_content.get_text(strip=True):
                sms_content = soup.find("div", class_="card-body") or soup.find("div", class_="sms-content")
                if not sms_content or not sms_content.get_text(strip=True):
                    error_msg = f"‚ùå ‡¶´‡¶æ‡¶Å‡¶ï‡¶æ ‡¶è‡¶∏‡¶è‡¶Æ‡¶è‡¶∏ ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá! ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞={number}, ‡¶∞‡ßá‡¶û‡ßç‡¶ú={range_value}"
                    logger.error(error_msg)
                    debug_file = os.path.join(DEBUG_LOG_DIR, f"empty_sms_{number}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html")
                    with open(debug_file, "w", encoding="utf-8") as f:
                        f.write(response.text)
                    logger.error(f"‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏ ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {debug_file}")
                    if attempt < max_retries - 1:
                        await asyncio.sleep(5)
                        continue
                    return None
            
            logger.info(f"‡¶è‡¶∏‡¶è‡¶Æ‡¶è‡¶∏ ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶´‡ßá‡¶ö ‡¶∏‡¶´‡¶≤: ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞={number}")
            return response.text
        except Exception as e:
            error_msg = f"‚ùå ‡¶è‡¶∏‡¶è‡¶Æ‡¶è‡¶∏ ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶´‡ßá‡¶ö ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞={number}, ‡¶∞‡ßá‡¶û‡ßç‡¶ú={range_value}, ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {str(e)}"
            logger.error(error_msg)
            if attempt < max_retries - 1:
                await asyncio.sleep(5)
            continue
    return None

async def process_sms(sms_html, number, range_value):
    """‡¶è‡¶∏‡¶è‡¶Æ‡¶è‡¶∏ ‡¶™‡¶æ‡¶∞‡ßç‡¶∏ ‡¶ï‡¶∞‡ßá OTP ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶®‡¶§‡ßÅ‡¶® ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã"""
    try:
        soup = BeautifulSoup(sms_html, "html.parser")
        sms_cards = soup.find_all("div", class_="card card-body border-bottom bg-soft-dark p-2 rounded-0")
        logger.info(f"‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá {len(sms_cards)}‡¶ü‡¶ø ‡¶è‡¶∏‡¶è‡¶Æ‡¶è‡¶∏ ‡¶ï‡¶æ‡¶∞‡ßç‡¶°")
        
        if not sms_cards:
            logger.info(f"‡¶ï‡ßã‡¶®‡ßã ‡¶è‡¶∏‡¶è‡¶Æ‡¶è‡¶∏ ‡¶ï‡¶æ‡¶∞‡ßç‡¶° ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø! ‡¶∞‡ßá‡¶û‡ßç‡¶ú={range_value}, ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞={number}")
            return
        
        dhaka_tz = pytz.timezone('Asia/Dhaka')
        current_time = datetime.now(dhaka_tz)
        
        for card in sms_cards:
            try:
                sms_text = card.find("p").get_text(strip=True) if card.find("p") else card.get_text(strip=True)
                logger.info(f"‡¶è‡¶∏‡¶è‡¶Æ‡¶è‡¶∏ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü: {sms_text}")
                if not sms_text:
                    logger.info("‡¶è‡¶∏‡¶è‡¶Æ‡¶è‡¶∏ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶´‡¶æ‡¶Å‡¶ï‡¶æ, ‡¶∏‡ßç‡¶ï‡¶ø‡¶™ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
                    continue
                
                sms_timestamp = card.find("span", class_="sms-date")
                timestamp_str = sms_timestamp.get_text(strip=True) if sms_timestamp else current_time.isoformat()
                try:
                    sms_time = datetime.fromisoformat(timestamp_str.replace("Z", "+00:00"))
                    sms_time = sms_time.astimezone(dhaka_tz)
                except ValueError:
                    try:
                        sms_time = datetime.strptime(timestamp_str, "%Y-%m-%d %H:%M:%S")
                        sms_time = dhaka_tz.localize(sms_time)
                    except ValueError:
                        logger.warning(f"‡¶ü‡¶æ‡¶á‡¶Æ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶™ ‡¶™‡¶æ‡¶∞‡ßç‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø: {timestamp_str}, ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá")
                        sms_time = current_time
                
                if current_time - sms_time > TIME_THRESHOLD:
                    logger.info(f"‡¶™‡ßÅ‡¶∞‡¶æ‡¶®‡ßã ‡¶è‡¶∏‡¶è‡¶Æ‡¶è‡¶∏ (‡¶ü‡¶æ‡¶á‡¶Æ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶™: {timestamp_str}), ‡¶∏‡ßç‡¶ï‡¶ø‡¶™ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
                    continue
                
                sms_id = hashlib.sha256(f"{number}{sms_text}".encode()).hexdigest()
                if sms_id in seen_sms:
                    logger.info(f"‡¶°‡ßÅ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶ü ‡¶è‡¶∏‡¶è‡¶Æ‡¶ê‡¶∏ (ID: {sms_id}), ‡¶∏‡ßç‡¶ï‡¶ø‡¶™ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
                    continue
                
                phone_number = mask_phone_number(number)
                logger.info(f"Final phone number for message: {phone_number}")
                
                code_match = re.search(r"(\d{6}|\d{5}|\d{4}|\d{3}[- ]?\d{3})", sms_text)
                if code_match:
                    otp_code = code_match.group(0).replace("-", "").replace(" ", "")
                    if "WhatsApp" in sms_text:
                        service = "WhatsApp"
                    elif "Facebook" in sms_text or "FB-" in sms_text:
                        service = "Facebook"
                    else:
                        service = "Unknown"
                    
                    country = str(range_value).split()[0] if range_value else "Unknown"
                    formatted_time = current_time.strftime("%d %b %Y, %I:%M %p")
                    
                    message = (
                        f"‚ú® {service}: OTP ALERT! ‚ú®\n\n"
                        f"üåé Country: {country}\n"
                        f"‚öôÔ∏è Service: {service}\n"
                        f"‚òéÔ∏è Number: {phone_number}\n"
                        f"üîë OTP ‡¶ï‡ßã‡¶°: `{otp_code}`\n"
                        f"üìù Full Message: ```\n{sms_text}\n```\n"
                        f"üïí Time: {formatted_time}\n\n"
                        f"üöÄ Be Active, New OTP Loading...\n\n"
                        f"BAPPY KHAN"
                    )
                    
                    logger.info(f"Message to be sent: {message}")
                    await send_telegram_message(message, CHAT_ID, reply_markup=None)
                    seen_sms.add(sms_id)
                    save_seen_sms()
                    logger.info(f"OTP ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá: {otp_code}, Service: {service}, SMS ID: {sms_id}")
                else:
                    logger.info("‡¶ï‡ßã‡¶®‡ßã OTP ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø")
            except Exception as e:
                error_msg = f"‚ùå ‡¶è‡¶∏‡¶è‡¶Æ‡¶è‡¶∏ ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: ‡¶∞‡ßá‡¶û‡ßç‡¶ú={range_value}, ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞={number}, ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {str(e)}"
                logger.error(error_msg)
                await send_telegram_message(error_msg, CHAT_ID)
    except Exception as e:
        error_msg = f"‚ùå ‡¶è‡¶∏‡¶è‡¶Æ‡¶ê‡¶∏ ‡¶™‡¶æ‡¶∞‡ßç‡¶∏ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: ‡¶∞‡ßá‡¶û‡ßç‡¶ú={range_value}, ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞={number}, ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {str(e)}"
        logger.error(error_msg)
        await send_telegram_message(error_msg, CHAT_ID)

async def wait_for_sms(session, csrf_token):
    """JSON ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶∞‡ßá‡¶û‡ßç‡¶ú ‡¶®‡¶ø‡¶Ø‡¶º‡ßá OTP ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ"""
    last_no_range_message = 0
    message_interval = 300
    
    while True:
        logger.info("‡¶®‡¶§‡ßÅ‡¶® ‡¶è‡¶∏‡¶è‡¶Æ‡¶ê‡¶∏ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
        try:
            with open(NUMBERS_RANGES_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except FileNotFoundError:
            initialize_numbers_ranges_file()
            data = {"ranges": []}
            logger.info("JSON ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø, ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶´‡¶æ‡¶á‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá...")
        
        ranges = data.get("ranges", [])
        if not ranges:
            current_time = time.time()
            if current_time - last_no_range_message > message_interval:
                logger.info("‡¶ï‡ßã‡¶®‡ßã ‡¶∞‡ßá‡¶û‡ßç‡¶ú ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø, ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
                await send_telegram_message("‚ö†Ô∏è ‡¶ï‡ßã‡¶®‡ßã ‡¶∞‡ßá‡¶û‡ßç‡¶ú ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§ /add_range ‡¶¨‡¶æ /sync ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", CHAT_ID)
                last_no_range_message = current_time
            else:
                logger.info("‡¶ï‡ßã‡¶®‡ßã ‡¶∞‡ßá‡¶û‡ßç‡¶ú ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø, ‡¶§‡¶¨‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡¶®‡¶ø (‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶¨‡ßç‡¶Ø‡¶¨‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶ï‡¶æ‡¶∞‡¶£‡ßá)")
            await asyncio.sleep(2)
            continue
        
        total_numbers_processed = 0
        for range_item in ranges:
            range_value = str(range_item.get("range", ""))
            range_numbers = range_item.get("numbers", [])
            if not range_numbers:
                logger.info(f"‡¶∞‡ßá‡¶û‡ßç‡¶ú {range_value} ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶®‡ßá‡¶á, ‡¶∏‡ßç‡¶ï‡¶ø‡¶™ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
                continue
            
            number_list_html, numbers = await fetch_number_list(session, csrf_token, range_value)
            if number_list_html == "SESSION_EXPIRED":
                logger.info("‡¶∏‡ßá‡¶∂‡¶® ‡¶Ö‡¶¨‡ßà‡¶ß, ‡¶™‡ßÅ‡¶®‡¶∞‡¶æ‡¶Ø‡¶º ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
                session, csrf_token = login_and_get_csrf()
                if not session or not csrf_token:
                    logger.error("‡¶™‡ßÅ‡¶®‡¶∞‡¶æ‡¶Ø‡¶º ‡¶≤‡¶ó‡¶á‡¶® ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•, ‡ß´ ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ...")
                    await asyncio.sleep(5)
                    continue
                number_list_html, numbers = await fetch_number_list(session, csrf_token, range_value)
            
            if not numbers:
                logger.info(f"‡¶∞‡ßá‡¶û‡ßç‡¶ú {range_value} ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø, ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶∞‡ßá‡¶û‡ßç‡¶ú‡ßá ‡¶Ø‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
                continue
            
            for number_info in numbers:
                number = str(number_info["number"])
                id_number = str(number_info["id_number"])
                sms_html = await fetch_sms_details(session, csrf_token, number, range_value, id_number)
                if sms_html == "SESSION_EXPIRED":
                    logger.info("‡¶∏‡ßá‡¶∂‡¶® ‡¶Ö‡¶¨‡ßà‡¶ß, ‡¶™‡ßÅ‡¶®‡¶∞‡¶æ‡¶Ø‡¶º ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
                    session, csrf_token = login_and_get_csrf()
                    if not session or not csrf_token:
                        logger.error("‡¶™‡ßÅ‡¶®‡¶∞‡¶æ‡¶Ø‡¶º ‡¶≤‡¶ó‡¶á‡¶® ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•, ‡ß´ ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ...")
                        await asyncio.sleep(5)
                        continue
                    sms_html = await fetch_sms_details(session, csrf_token, number, range_value, id_number)
                
                if sms_html:
                    await process_sms(sms_html, number, range_value)
                else:
                    logger.info(f"‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ {number} ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶∏‡¶è‡¶Æ‡¶ê‡¶∏ ‡¶´‡ßá‡¶ö ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•, ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞‡ßá ‡¶Ø‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
                
                total_numbers_processed += 1
        
        logger.info(f"‡¶Æ‡ßã‡¶ü ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {total_numbers_processed}")
        logger.info("‡ß® ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
        await asyncio.sleep(2)

async def handle_bot_updates(update, session, csrf_token):
    """‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶ü ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤ ‡¶ï‡¶∞‡¶æ"""
    global pending_ranges
    try:
        if update.message:
            message = update.message
            chat_id = message.chat.id
            user_id = message.from_user.id
            username = message.from_user.username or "Unknown"
            text = message.text or ""
            logger.info(f"‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá: {text} | Chat ID: {chat_id} | User ID: {user_id} | Username: @{username}")
            
            try:
                with open(NUMBERS_RANGES_FILE, "r", encoding="utf-8") as f:
                    data = json.load(f)
            except FileNotFoundError:
                initialize_numbers_ranges_file()
                data = {"ranges": []}
            
            ranges = data.get("ranges", [])
            
            # ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ö‡ßá‡¶ï ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
            def is_admin(chat_id, user_id):
                return str(chat_id) == str(ADMIN_CHAT_ID) and user_id in ADMIN_USER_IDS
            
            # /add_admin ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
            if text.startswith(("/add_admin", "/add_admin@dxsmsreceiver_bot")):
                if not is_admin(chat_id, user_id):
                    await bot.send_message(
                        chat_id=chat_id,
                        text="‚ùå ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®!"
                    )
                    logger.warning(f"Non-admin attempted /add_admin: User ID: {user_id}, Username: @{username}")
                    return
                parts = text.split()
                if len(parts) != 2:
                    await bot.send_message(
                        chat_id=chat_id,
                        text="‚ö†Ô∏è ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡ßà‡¶ß ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶¶‡¶ø‡¶®‡•§ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: /add_admin 123456789"
                    )
                    return
                new_admin_id = parts[1].strip()
                if not re.match(r"^\d+$", new_admin_id):
                    await bot.send_message(
                        chat_id=chat_id,
                        text="‚ùå ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶™‡¶ú‡¶ø‡¶ü‡¶ø‡¶≠ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§"
                    )
                    return
                new_admin_id = int(new_admin_id)
                if new_admin_id in ADMIN_USER_IDS:
                    await bot.send_message(
                        chat_id=chat_id,
                        text=f"‚ÑπÔ∏è ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø {new_admin_id} ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶è‡¶ï‡¶ú‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡•§"
                    )
                    return
                ADMIN_USER_IDS.append(new_admin_id)
                save_admins()
                logger.info(f"‡¶®‡¶§‡ßÅ‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {new_admin_id}, ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®: {user_id} (@{username})")
                formatted_time = datetime.now(pytz.timezone('Asia/Dhaka')).strftime("%d %b %Y, %I:%M %p")
                await bot.send_message(
                    chat_id=chat_id,
                    text=(
                        f"‚úÖ ‡¶®‡¶§‡ßÅ‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø `{new_admin_id}`\n"
                        f"üïí ‡¶∏‡¶Æ‡¶Ø‡¶º: {formatted_time}\n"
                        f"üöÄ ‡¶è‡¶ñ‡¶® ‡¶§‡¶ø‡¶®‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§\n\n"
                        f"~ BAPPY KHAN"
                    ),
                    parse_mode="Markdown"
                )
                return
            
            # /remove_admin ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
            if text.startswith(("/remove_admin", "/remove_admin@dxsmsreceiver_bot")):
                if not is_admin(chat_id, user_id):
                    await bot.send_message(
                        chat_id=chat_id,
                        text="‚ùå ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®!"
                    )
                    logger.warning(f"Non-admin attempted /remove_admin: User ID: {user_id}, Username: @{username}")
                    return
                parts = text.split()
                if len(parts) != 2:
                    await bot.send_message(
                        chat_id=chat_id,
                        text="‚ö†Ô∏è ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡ßà‡¶ß ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶¶‡¶ø‡¶®‡•§ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: /remove_admin 123456789"
                    )
                    return
                admin_id_to_remove = parts[1].strip()
                if not re.match(r"^\d+$", admin_id_to_remove):
                    await bot.send_message(
                        chat_id=chat_id,
                        text="‚ùå ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶™‡¶ú‡¶ø‡¶ü‡¶ø‡¶≠ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§"
                    )
                    return
                admin_id_to_remove = int(admin_id_to_remove)
                if admin_id_to_remove not in ADMIN_USER_IDS:
                    await bot.send_message(
                        chat_id=chat_id,
                        text=f"‚ÑπÔ∏è ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø {admin_id_to_remove} ‡¶è‡¶ï‡¶ú‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶®‡¶Ø‡¶º‡•§"
                    )
                    return
                if len(ADMIN_USER_IDS) <= 1:
                    await bot.send_message(
                        chat_id=chat_id,
                        text="‚ùå ‡¶∂‡ßá‡¶∑ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡¶ï‡ßá ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ‡•§ ‡¶Ö‡¶®‡ßç‡¶§‡¶§ ‡¶è‡¶ï‡¶ú‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§"
                    )
                    return
                ADMIN_USER_IDS.remove(admin_id_to_remove)
                save_admins()
                logger.info(f"‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {admin_id_to_remove}, ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®: {user_id} (@{username})")
                formatted_time = datetime.now(pytz.timezone('Asia/Dhaka')).strftime("%d %b %Y, %I:%M %p")
                await bot.send_message(
                    chat_id=chat_id,
                    text=(
                        f"‚úÖ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø `{admin_id_to_remove}`\n"
                        f"üïí ‡¶∏‡¶Æ‡¶Ø‡¶º: {formatted_time}\n"
                        f"üöÄ ‡¶§‡¶ø‡¶®‡¶ø ‡¶Ü‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶® ‡¶®‡¶æ‡•§\n\n"
                        f"~ BAPPY KHAN"
                    ),
                    parse_mode="Markdown"
                )
                return
            
            # /check_id ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
            if text.startswith(("/check_id", "/check_id@dxsmsreceiver_bot")):
                if not is_admin(chat_id, user_id):
                    await bot.send_message(
                        chat_id=chat_id,
                        text=f"‚ùå ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®! (User ID: {user_id})"
                    )
                    logger.warning(f"Non-admin attempted /check_id: User ID: {user_id}, Username: @{username}")
                    return
                parts = text.split()
                if len(parts) < 2:
                    await bot.send_message(
                        chat_id=chat_id,
                        text="‚ö†Ô∏è ‡¶Ü‡¶á‡¶°‡¶ø ‡¶¶‡¶ø‡¶®‡•§ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: /check_id -1002639503570"
                    )
                    return
                input_id = parts[1].strip()
                if input_id == str(ADMIN_CHAT_ID):
                    msg = f"‚úÖ ‡¶è‡¶ü‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶Ü‡¶á‡¶°‡¶ø: {input_id}\n‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá‡•§"
                else:
                    msg = f"‚ÑπÔ∏è ‡¶è‡¶ü‡¶ø ‡¶®‡¶®-‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶Ü‡¶á‡¶°‡¶ø: {input_id}\n‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ‡•§"
                await bot.send_message(
                    chat_id=chat_id,
                    text=msg
                )
                logger.info(f"‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶Ü‡¶á‡¶°‡¶ø: {input_id} | User ID: {user_id} | Chat ID: {chat_id}")
                return
            
            # /sync ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
            elif text.startswith(("/sync", "/sync@dxsmsreceiver_bot")):
                if not is_admin(chat_id, user_id):
                    await bot.send_message(
                        chat_id=chat_id,
                        text=f"‚ùå ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®! (User ID: {user_id})"
                    )
                    logger.warning(f"Non-admin attempted /sync: User ID: {user_id}, Username: @{username}")
                    return
                await bot.send_message(
                    chat_id=chat_id,
                    text="üîÑ API ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶∞‡ßá‡¶û‡ßç‡¶ú ‡¶∏‡¶ø‡¶ô‡ßç‡¶ï‡ßç‡¶∞‡ßã‡¶®‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá..."
                )
                success = await sync_numbers_from_api(session, csrf_token, chat_id)
                if not success:
                    await bot.send_message(
                        chat_id=chat_id,
                        text="‚ùå ‡¶∏‡¶ø‡¶ô‡ßç‡¶ï‡ßç‡¶∞‡ßã‡¶®‡¶æ‡¶á‡¶ú‡ßá‡¶∂‡¶® ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•! ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶≤‡¶ó ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®‡•§"
                    )
            
            # /delete_all ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
            elif text.startswith(("/delete_all", "/delete_all@dxsmsreceiver_bot")):
                if not is_admin(chat_id, user_id):
                    await bot.send_message(
                        chat_id=chat_id,
                        text=f"‚ùå ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®! (User ID: {user_id})"
                    )
                    logger.warning(f"Non-admin attempted /delete_all: User ID: {user_id}, Username: @{username}")
                    return
                keyboard = [
                    [InlineKeyboardButton("‡¶π‡ßç‡¶Ø‡¶æ‡¶Å, ‡¶∏‡¶¨ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®", callback_data="delete_all")],
                    [InlineKeyboardButton("‡¶®‡¶æ, ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®", callback_data="cancel_delete")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await bot.send_message(
                    chat_id=chat_id,
                    text="‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶Ø‡ßá ‡¶∏‡¶ï‡¶≤ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶∞‡ßá‡¶û‡ßç‡¶ú ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®?",
                    reply_markup=reply_markup
                )
            
            # /add_range ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
            elif text.startswith(("/add_range", "/add_range@dxsmsreceiver_bot")):
                if not is_admin(chat_id, user_id):
                    await bot.send_message(
                        chat_id=chat_id,
                        text=f"‚ùå ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®! (User ID: {user_id})"
                    )
                    logger.warning(f"Non-admin attempted /add_range: User ID: {user_id}, Username: @{username}")
                    return
                pending_ranges[chat_id] = {"range": None, "numbers": []}
                await bot.send_message(
                    chat_id=chat_id,
                    text="‡¶∞‡ßá‡¶û‡ßç‡¶ú ‡¶¶‡¶ø‡¶® (‡¶Ø‡ßá‡¶Æ‡¶®, BOLIVIA 1926)‡•§"
                )
            
            # /remove_range ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
            elif text.startswith(("/remove_range", "/remove_range@dxsmsreceiver_bot")):
                if not is_admin(chat_id, user_id):
                    await bot.send_message(
                        chat_id=chat_id,
                        text=f"‚ùå ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®! (User ID: {user_id})"
                    )
                    logger.warning(f"Non-admin attempted /remove_range: User ID: {user_id}, Username: @{username}")
                    return
                numbers, ranges_list = load_numbers_ranges()
                if ranges_list:
                    keyboard = [[InlineKeyboardButton(range_val, callback_data=f"remove_{range_val}")] for range_val in ranges_list]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await bot.send_message(
                        chat_id=chat_id,
                        text="‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶§‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∞‡ßá‡¶û‡ßç‡¶ú ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®:",
                        reply_markup=reply_markup
                    )
                else:
                    await bot.send_message(
                        chat_id=chat_id,
                        text="‡¶ï‡ßã‡¶®‡ßã ‡¶∞‡ßá‡¶û‡ßç‡¶ú ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡¶®‡¶ø‡•§"
                    )
            
            # /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
            elif text.startswith(("/start", "/start@dxsmsreceiver_bot")):
                await bot.send_message(
                    chat_id=chat_id,
                    text=f"üëã ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ, @{username}! (User ID: {user_id})\n‡¶∞‡ßá‡¶û‡ßç‡¶ú ‡¶è‡¶¨‡¶Ç ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶§‡ßá /add_range, API ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶ø‡¶ô‡ßç‡¶ï ‡¶ï‡¶∞‡¶§‡ßá /sync (‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®), ‡¶¨‡¶æ ‡¶∏‡¶¨ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá /delete_all (‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®) ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
                )
            
            # /list_ranges ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
            elif text.startswith(("/list_ranges", "/list_ranges@dxsmsreceiver_bot")):
                if not is_admin(chat_id, user_id):
                    await bot.send_message(
                        chat_id=chat_id,
                        text=f"‚ùå ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®! (User ID: {user_id})"
                    )
                    logger.warning(f"Non-admin attempted /list_ranges: User ID: {user_id}, Username: @{username}")
                    return
                numbers, ranges_list = load_numbers_ranges()
                if ranges:
                    keyboard = []
                    for r in ranges:
                        range_name = r["range"]
                        num_count = len(r["numbers"])
                        keyboard.append([InlineKeyboardButton(f"{range_name}: {num_count}‡¶ü‡¶ø ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞", callback_data=f"view_{range_name}"),
                                         InlineKeyboardButton("üóëÔ∏è ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü", callback_data=f"confirm_delete_range_{range_name}")])
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await bot.send_message(
                        chat_id=chat_id,
                        text="‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶∞‡ßá‡¶û‡ßç‡¶ú (‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®):",
                        reply_markup=reply_markup
                    )
                else:
                    await bot.send_message(
                        chat_id=chat_id,
                        text="‡¶ï‡ßã‡¶®‡ßã ‡¶∞‡ßá‡¶û‡ßç‡¶ú ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡¶®‡¶ø‡•§"
                    )
            
            # ‡¶™‡ßá‡¶®‡ßç‡¶°‡¶ø‡¶Ç ‡¶∞‡ßá‡¶û‡ßç‡¶ú ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶ø‡¶Ç
            elif chat_id in pending_ranges and pending_ranges[chat_id].get("range") is not None:
                if not text:
                    logger.info("‡¶´‡¶æ‡¶Å‡¶ï‡¶æ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú, ‡¶∏‡ßç‡¶ï‡¶ø‡¶™ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
                    return
                logger.info(f"Received text: '{text}' (length: {len(text)})")
                cleaned_text = text.strip()
                if cleaned_text in ["/add_range", "/add_range@dxsmsreceiver_bot"]:
                    if not is_admin(chat_id, user_id):
                        await bot.send_message(
                            chat_id=chat_id,
                            text=f"‚ùå ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®! (User ID: {user_id})"
                        )
                        logger.warning(f"Non-admin attempted /add_range in pending range: User ID: {user_id}, Username: @{username}")
                        return
                    logger.info(f"Resetting pending_ranges for chat_id {chat_id}: {pending_ranges[chat_id]}")
                    pending_ranges[chat_id] = {"range": None, "numbers": []}
                    logger.info(f"After reset, pending_ranges for chat_id {chat_id}: {pending_ranges[chat_id]}")
                    await bot.send_message(
                        chat_id=chat_id,
                        text="‡¶∞‡ßá‡¶û‡ßç‡¶ú ‡¶¶‡¶ø‡¶® (‡¶Ø‡ßá‡¶Æ‡¶®, BOLIVIA 1926)‡•§"
                    )
                    return
                numbers_input = text.split("\n")
                range_value = pending_ranges[chat_id]["range"]
                valid_numbers = []
                invalid_numbers = []
                for number in numbers_input:
                    number = str(number).strip()
                    if not number:
                        continue
                    if validate_phone_number(number):
                        valid_numbers.append(number)
                        pending_ranges[chat_id]["numbers"].append(number)
                        logger.info(f"‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {number}, ‡¶Æ‡ßã‡¶ü ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞: {len(pending_ranges[chat_id]['numbers'])}")
                    else:
                        invalid_numbers.append(number)
                if valid_numbers:
                    existing_range = next((item for item in ranges if item["range"] == range_value), None)
                    if existing_range:
                        existing_range["numbers"].extend([num for num in valid_numbers if num not in existing_range["numbers"]])
                    else:
                        ranges.append({"range": range_value, "numbers": valid_numbers})
                    save_numbers_ranges(ranges)
                    valid_msg = f"‚úÖ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {', '.join(valid_numbers)}\n‡¶∞‡ßá‡¶û‡ßç‡¶ú ‡¶è‡¶¨‡¶Ç ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {range_value} ({len(pending_ranges[chat_id]['numbers'])}‡¶ü‡¶ø ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞)\n‡¶®‡¶§‡ßÅ‡¶® ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶®, ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶®‡¶§‡ßÅ‡¶® ‡¶∞‡ßá‡¶û‡ßç‡¶ú‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø /add_range ‡¶¶‡¶ø‡¶®‡•§"
                    await bot.send_message(chat_id=chat_id, text=valid_msg)
                if invalid_numbers:
                    invalid_msg = f"‚ö†Ô∏è ‡¶Ö‡¶¨‡ßà‡¶ß ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞! ‡ßÆ-‡ßß‡ß® ‡¶°‡¶ø‡¶ú‡¶ø‡¶ü‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶®‡•§ ‡¶Ö‡¶¨‡ßà‡¶ß ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞: {', '.join(invalid_numbers)}"
                    await bot.send_message(chat_id=chat_id, text=invalid_msg)
                return
            
            # ‡¶™‡ßá‡¶®‡ßç‡¶°‡¶ø‡¶Ç ‡¶∞‡ßá‡¶û‡ßç‡¶ú‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∞‡ßá‡¶û‡ßç‡¶ú ‡¶á‡¶®‡¶™‡ßÅ‡¶ü
            elif chat_id in pending_ranges and pending_ranges[chat_id]["range"] is None:
                if not is_admin(chat_id, user_id):
                    await bot.send_message(
                        chat_id=chat_id,
                        text=f"‚ùå ‡¶è‡¶á ‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®! (User ID: {user_id})"
                    )
                    logger.warning(f"Non-admin attempted to input range: User ID: {user_id}, Username: @{username}")
                    return
                pending_ranges[chat_id]["range"] = text.strip()
                await bot.send_message(
                    chat_id=chat_id,
                    text=f"‚úÖ ‡¶∞‡ßá‡¶û‡ßç‡¶ú ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {text}\n‡¶è‡¶ñ‡¶® ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶® (‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶≤‡¶æ‡¶á‡¶®‡ßá ‡¶è‡¶ï‡¶ü‡¶ø)‡•§"
                )
        
        # ‡¶á‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶ï‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶ø‡¶Ç
        if update.callback_query:
            query = update.callback_query
            data = query.data
            chat_id = query.message.chat.id
            user_id = query.from_user.id
            username = query.from_user.username or "Unknown"
            logger.info(f"‡¶á‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡¶æ‡¶ü‡¶® ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {data} | Chat ID: {chat_id} | User ID: {user_id} | Username: @{username}")
            await query.answer()
            
            # ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ö‡ßá‡¶ï
            def is_admin(chat_id, user_id):
                return str(chat_id) == str(ADMIN_CHAT_ID) and user_id in ADMIN_USER_IDS
            
            if data == "sync_now":
                if not is_admin(chat_id, user_id):
                    await bot.send_message(
                        chat_id=chat_id,
                        text=f"‚ùå ‡¶è‡¶á ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®! (User ID: {user_id})"
                    )
                    logger.warning(f"Non-admin attempted sync_now: User ID: {user_id}, Username: @{username}")
                    return
                await bot.send_message(
                    chat_id=chat_id,
                    text="üîÑ API ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶∞‡ßá‡¶û‡ßç‡¶ú ‡¶∏‡¶ø‡¶ô‡ßç‡¶ï‡ßç‡¶∞‡ßã‡¶®‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá..."
                )
                success = await sync_numbers_from_api(session, csrf_token, chat_id)
                if not success:
                    await bot.send_message(
                        chat_id=chat_id,
                        text="‚ùå ‡¶∏‡¶ø‡¶ô‡ßç‡¶ï‡ßç‡¶∞‡ßã‡¶®‡¶æ‡¶á‡¶ú‡ßá‡¶∂‡¶® ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•! ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶≤‡¶ó ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®‡•§"
                    )
            elif data == "confirm_delete_all":
                if not is_admin(chat_id, user_id):
                    await bot.send_message(
                        chat_id=chat_id,
                        text=f"‚ùå ‡¶è‡¶á ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®! (User ID: {user_id})"
                    )
                    logger.warning(f"Non-admin attempted confirm_delete_all: User ID: {user_id}, Username: @{username}")
                    return
                keyboard = [
                    [InlineKeyboardButton("‡¶π‡ßç‡¶Ø‡¶æ‡¶Å, ‡¶∏‡¶¨ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®", callback_data="delete_all")],
                    [InlineKeyboardButton("‡¶®‡¶æ, ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®", callback_data="cancel_delete")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await bot.send_message(
                    chat_id=chat_id,
                    text="‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶Ø‡ßá ‡¶∏‡¶ï‡¶≤ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶∞‡ßá‡¶û‡ßç‡¶ú ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®?",
                    reply_markup=reply_markup
                )
            elif data == "delete_all":
                if not is_admin(chat_id, user_id):
                    await bot.send_message(
                        chat_id=chat_id,
                        text=f"‚ùå ‡¶è‡¶á ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®! (User ID: {user_id})"
                    )
                    logger.warning(f"Non-admin attempted delete_all: User ID: {user_id}, Username: @{username}")
                    return
                success = delete_all_numbers_ranges()
                if success:
                    await bot.send_message(
                        chat_id=chat_id,
                        text="‚úÖ ‡¶∏‡¶ï‡¶≤ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶∞‡ßá‡¶û‡ßç‡¶ú ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!"
                    )
                else:
                    await bot.send_message(
                        chat_id=chat_id,
                        text="‚ùå ‡¶∏‡¶ï‡¶≤ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶∞‡ßá‡¶û‡ßç‡¶ú ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ! ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶≤‡¶ó ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®‡•§"
                    )
            elif data.startswith("confirm_delete_range_"):
                if not is_admin(chat_id, user_id):
                    await bot.send_message(
                        chat_id=chat_id,
                        text=f"‚ùå ‡¶è‡¶á ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®! (User ID: {user_id})"
                    )
                    logger.warning(f"Non-admin attempted confirm_delete_range: User ID: {user_id}, Username: @{username}")
                    return
                try:
                    range_value = data.split("confirm_delete_range_")[1]
                    keyboard = [[InlineKeyboardButton("‡¶π‡ßç‡¶Ø‡¶æ‡¶Å", callback_data=f"delete_range_{range_value}"),
                                 InlineKeyboardButton("‡¶®‡¶æ", callback_data="cancel_delete")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await bot.send_message(
                        chat_id=chat_id,
                        text=f"‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶Ø‡ßá ‡¶∞‡ßá‡¶û‡ßç‡¶ú‡¶ü‡¶ø ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶¨‡ßá‡¶®: {range_value}?",
                        reply_markup=reply_markup
                    )
                except IndexError:
                    logger.error(f"Invalid callback data: {data}")
                    await bot.send_message(chat_id=chat_id, text="‚ùå ‡¶Ö‡¶¨‡ßà‡¶ß ‡¶ï‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶°‡¶æ‡¶ü‡¶æ!")
            elif data.startswith("delete_range_"):
                if not is_admin(chat_id, user_id):
                    await bot.send_message(
                        chat_id=chat_id,
                        text=f"‚ùå ‡¶è‡¶á ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®! (User ID: {user_id})"
                    )
                    logger.warning(f"Non-admin attempted delete_range: User ID: {user_id}, Username: @{username}")
                    return
                try:
                    range_value = data.split("delete_range_")[1]
                    logger.info(f"Processing delete_range_ for range: {range_value}")
                    try:
                        with open(NUMBERS_RANGES_FILE, "r", encoding="utf-8") as f:
                            data = json.load(f)
                        ranges = data.get("ranges", [])
                        ranges = [item for item in ranges if item["range"].strip() != range_value.strip()]
                        save_numbers_ranges(ranges)
                        await bot.send_message(
                            chat_id=chat_id,
                            text=f"‚úÖ ‡¶∞‡ßá‡¶û‡ßç‡¶ú ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {range_value}"
                        )
                    except Exception as e:
                        logger.error(f"‡¶∞‡ßá‡¶û‡ßç‡¶ú ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e)}")
                        await send_telegram_message(f"‚ùå ‡¶∞‡ßá‡¶û‡ßç‡¶ú ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e)}", chat_id)
                except IndexError:
                    logger.error(f"Invalid callback data: {data}")
                    await bot.send_message(chat_id=chat_id, text="‚ùå ‡¶Ö‡¶¨‡ßà‡¶ß ‡¶ï‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶°‡¶æ‡¶ü‡¶æ!")
            elif data == "cancel_delete":
                await bot.send_message(
                    chat_id=chat_id,
                    text="‚ùå ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§"
                )
            elif data.startswith("view_"):
                if not is_admin(chat_id, user_id):
                    await bot.send_message(
                        chat_id=chat_id,
                        text=f"‚ùå ‡¶è‡¶á ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®! (User ID: {user_id})"
                    )
                    logger.warning(f"Non-admin attempted view_range: User ID: {user_id}, Username: @{username}")
                    return
                try:
                    range_value = data[5:]
                    await bot.send_message(
                        chat_id=chat_id,
                        text=f"‡¶∞‡ßá‡¶û‡ßç‡¶ú: {range_value} (‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶∞ ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞ ‡¶Ü‡¶∏‡¶õ‡ßá...)"
                    )
                except IndexError:
                    logger.error(f"Invalid callback data: {data}")
                    await bot.send_message(chat_id=chat_id, text="‚ùå ‡¶Ö‡¶¨‡ßà‡¶ß ‡¶ï‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶°‡¶æ‡¶ü‡¶æ!")
    except Exception as e:
        logger.error(f"‡¶¨‡¶ü ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e)}")
        await send_telegram_message(f"‚ùå ‡¶¨‡¶ü‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e)}", chat_id)

async def run_bot(session, csrf_token):
    """‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶ü ‡¶≤‡ßÅ‡¶™"""
    offset = None
    last_reset = time.time()
    reset_interval = 600
    while True:
        try:
            if time.time() - last_reset > reset_interval:
                logger.info("‡¶Ö‡¶´‡¶∏‡ßá‡¶ü ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
                offset = None
                last_reset = time.time()
            logger.info(f"‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶´‡ßá‡¶ö ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá... ‡¶∏‡¶Æ‡¶Ø‡¶º: {datetime.now()}")
            updates = await bot.get_updates(offset=offset, timeout=30)
            logger.info(f"‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá: {len(updates)}‡¶ü‡¶ø")
            for update in updates:
                logger.info(f"‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá: update_id={update.update_id}")
                await handle_bot_updates(update, session, csrf_token)
                offset = update.update_id + 1
            await asyncio.sleep(1)
        except telegram.error.InvalidToken:
            logger.error("‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶ü ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶≠‡ßÅ‡¶≤‡•§ BotFather ‡¶•‡ßá‡¶ï‡ßá ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
            await send_telegram_message("‚ùå ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶ü ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶≠‡ßÅ‡¶≤‡•§ BotFather ‡¶•‡ßá‡¶ï‡ßá ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", CHAT_ID)
            await asyncio.sleep(5)
        except telegram.error.NetworkError as e:
            logger.error(f"‡¶®‡ßá‡¶ü‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e)}")
            await send_telegram_message(f"‚ùå ‡¶®‡ßá‡¶ü‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e)}", CHAT_ID)
            await asyncio.sleep(5)
        except telegram.error.TelegramError as e:
            logger.error(f"‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ API ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e)}")
            await send_telegram_message(f"‚ùå ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ API ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e)}", CHAT_ID)
            await asyncio.sleep(5)
        except Exception as e:
            logger.error(f"‡¶¨‡¶ü ‡¶≤‡ßÅ‡¶™‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e)}")
            await send_telegram_message(f"‚ùå ‡¶¨‡¶ü ‡¶≤‡ßÅ‡¶™‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e)}", CHAT_ID)
            await asyncio.sleep(5)
async def main():
    """‡¶Æ‡ßÇ‡¶≤ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®"""
    load_seen_sms()
    
    await send_startup_alert()
    
    session, csrf_token = login_and_get_csrf()
    while not session or not csrf_token:
        logger.error("‡¶≤‡¶ó‡¶á‡¶® ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•, ‡ß´ ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶™‡¶∞ ‡¶™‡ßÅ‡¶®‡¶∞‡¶æ‡¶Ø‡¶º ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ...")
        await asyncio.sleep(5)
        session, csrf_token = login_and_get_csrf()
    
    await sync_numbers_from_api(session, csrf_token)
    
    bot_task = asyncio.create_task(run_bot(session, csrf_token))
    sms_task = asyncio.create_task(wait_for_sms(session, csrf_token))
    
    try:
        sync_interval = 300  # ‡ß´ ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü = ‡ß©‡ß¶‡ß¶ ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°
        last_sync = time.time()
        
        while True:
            if time.time() - last_sync > sync_interval:
                logger.info("Starting periodic API synchronization...")
                await sync_numbers_from_api(session, csrf_token, ADMIN_CHAT_ID)
                last_sync = time.time()
            
            if not session or not csrf_token:
                logger.info("Session invalid, re-logging in...")
                session, csrf_token = login_and_get_csrf()
                if not session or not csrf_token:
                    logger.error("Re-login failed, waiting 5 seconds...")
                    await asyncio.sleep(5)
                    continue
            
            await asyncio.sleep(1)
            
    except KeyboardInterrupt:
        logger.info("‡¶ï‡ßã‡¶° ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
        bot_task.cancel()
        sms_task.cancel()
        try:
            await bot_task
            await sms_task
        except asyncio.CancelledError:
            logger.info("‡¶ü‡¶æ‡¶∏‡ßç‡¶ï‡¶ó‡ßÅ‡¶≤‡ßã ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
    except Exception as e:
        error_msg = f"‚ùå ‡¶ï‡ßã‡¶°‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e)}"
        logger.error(error_msg)
        await send_telegram_message(error_msg, CHAT_ID)
        bot_task.cancel()
        sms_task.cancel()
        try:
            await bot_task
            await sms_task
        except asyncio.CancelledError:
            logger.info("‡¶ü‡¶æ‡¶∏‡ßç‡¶ï‡¶ó‡ßÅ‡¶≤‡ßã ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")

if __name__ == "__main__":
    logger.info("‡¶ï‡ßã‡¶° ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        loop.run_until_complete(main())
    except RuntimeError as e:
        logger.error(f"‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶≤‡ßÅ‡¶™ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e)}")
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(main())
    finally:
        loop.close()
